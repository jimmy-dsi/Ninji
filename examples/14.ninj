module main

import math
import threads as .

proc main() {
	print(async_main().value())
}

async proc async_main() {
	files_data  := test()
	math_result := math.fib(100)
	return await files_data + math_result->cstring
}

async proc test() *string {
	data_1 := read_file("some_file_1.txt")
	data_2 := read_file("some_file_2.txt")
	data_3 := read_file("some_file_3.txt")
	
	do_stuff := 1 + 3
	
	return await data_1 + "\n" + await data_2 + "\n" + await data_3 + do_stuff->cstring
}

async proc read_file(file_path *string) *string {
	result := ""
	t := spawn open_file(file_path, &result)
	
	while !t.finished() {
		yield
	}
	
	return &result
}

// Translates to:

proc main() {
	t := async_main()
	while !t.has_value() {
		t = async_main(t.frame(), t.position())
	}
	print(t.get_value())
}

proc async_main(in_frame ?*task_frame = null, position ?ptr) task(*string) {
	frame_prototype := task_frame {
		files_data:  task(*string) {},
		math_result: int {}
	}

	frame :=
		when in_frame === null
			select &frame_prototype
		else
			select in_frame as *task_frame as typeof &frame_prototype
			
	if position !== null {
		jump position
	}

	frame.files_data  = test()
	frame.math_result = math.fib(100)
	
	return task(*string):new(
		frame    = frame,
		position = after_return
	)
	
	after_return: do { }

	while !frame.files_data.has_value() {
		frame.files_data = test(t.frame(), frame.files_data.position())
		return task(*string):new(
			frame    = frame,
			position = after_return_2
		)
		after_return_2: do { }
	}
	
	return task(*string):new(
		value = frame.files_data.get_value() + math_result->cstring
	)
}

proc test(in_frame ?*task_frame = null, position ?ptr) task(*string) {
	frame_prototype := task_frame {
		data_1: task(*string) {},
		data_2: task(*string) {},
		data_3: task(*string) {},
		
		do_stuff: int {}
	}

	frame :=
		when in_frame === null
			select &frame_prototype
		else
			select in_frame as *task_frame as typeof &frame_prototype
			
	if position !== null {
		jump position
	}

	frame.data_1 = read_file("some_file_1.txt")
	frame.data_2 = read_file("some_file_2.txt")
	frame.data_3 = read_file("some_file_3.txt")
	
	frame.do_stuff = 1 + 3
	
	return task(*string):new(
		frame    = frame,
		position = after_return
	)
	
	after_return: do { }

	while !frame.data_1.has_value() {
		frame.data_1 = read_file("", frame.data_1.frame(), frame.data_1.position()) // Parameter shouldn't matter as it is stored with frame
		return task(*string):new(
			frame    = frame,
			position = after_return_2
		)
		after_return_2: do { }
	}

	while !frame.data_2.has_value() {
		frame.data_2 = read_file("", frame.data_2.frame(), frame.data_2.position()) // Parameter shouldn't matter as it is stored with frame
		return task(*string):new(
			frame    = frame,
			position = after_return_3
		)
		after_return_3: do { }
	}

	while !frame.data_3.has_value() {
		frame.data_3 = read_file("", frame.data_3.frame(), frame.data_3.position()) // Parameter shouldn't matter as it is stored with frame
		return task(*string):new(
			frame    = frame,
			position = after_return_4
		)
		after_return_4: do { }
	}
	
	return task(*string):new(
		value = frame.data_1.get_value() + "\n" + frame.data_2.get_value() + "\n" + frame.data_3.get_value() + frame.do_stuff -> cstring
	)
}

proc read_file(file_path *string, in_frame ?*task_frame = null, position ?ptr) task(*string) {
	frame_prototype := task_frame {
		file_path: &"" -> *string -> &*string,
		
		result:    cstring {},
		t:         thread {}
	}

	frame :=
		when in_frame === null
			select &frame_prototype
		else
			select in_frame as *task_frame as typeof &frame_prototype
			
	if position !== null {
		jump position
	}
	
	frame.file_path = &file_path

	frame.result = ""
	frame.t = spawn open_file(*frame.file_path, &frame.result)
	
	while !frame.t.finished() {
		return task(*string):new(
			frame    = frame,
			position = after_return
		)
		after_return: do { }
	}
	
	return task(*string):new(
		value = &frame.result
	)
}

// `await` breakdown:
async proc some_proc() {
	// ...
	some_var := await some_async_proc()
	// ...
}

// The above roughly translates to:

async proc some_proc() {
	// ...
	
	t := some_async_proc()
	while !t.has_value() {
		yield
		t = some_async_proc(t.frame(), t.position())
	}
	some_var := some_async_proc.get_value()
	
	// ...
}

// `yield` breakdown:
async proc some_proc() return_type {
	// ...
	if some_condition() {
		yield
		some_action()
	}
	// ...
}

// The above roughly translates to:

proc some_proc(in_frame ?*task_frame = null, position ?ptr) {
	frame_prototype := task_frame {
		// Procedure parameters and local variables here
	}
	
	frame :=
		when in_frame === null
			select &frame_prototype
		else
			select in_frame as *task_frame as typeof &frame_prototype
			
	if position !== null {
		jump position
	}

	// ...
	
	if some_condition() {
		return task(return_type):new(  // The `yield` statement
			frame    = frame,          // The `yield` statement
			position = after_return    // The `yield` statement
		)                              // The `yield` statement
		
		after_return: do {}
		
		some_action()
	}
	
	// ...
}

// Task frame with scoped variables:

async some_proc() {
	a := "test"
	if a == "test" {
		b := 0
		c := true
	} else {
		b := nothing
		c := 16w
		d := null
		
		if c == 16 {
			e := 'c'
		} else if c == 12 {
			e := "aaa"
		} else {
			f := [1, 2, 3]
		}
	}
	
	x := & char{}
	for v, i in ['2', '4', '8', '16'] {
		q := v->byte + 1
		x = &v
	}
	
	print(x)
}

// Frame definition for the above:

frame_prototype := task_frame {
	a: cstring {},
	x: & char{},
	_scoped_block_1: variant {
		_sub_1: object {
			b: int {},
			c: bool {}
		},
		_sub_2: object {
			b: void {},
			c: word {},
			d: nullable {},
			_scoped_block_2: variant {
				_sub_1: object {
					e: char {}
				},
				_sub_2: object {
					e: cstring {}
				},
				_sub_3: object {
					f: int[3] {}
				}
			}
		},
		_sub_3: object {
			v: char {},
			i: uint {},
			q: byte {}
		}
	}
}

// Translation of getting super-scope references to sub-scope values:

proc some_proc() {
	x := & char{}
	arr := ['2', '4', '8', '16']
	while i := 0 ... i < arr.count() ... i += 1 {
		v := arr[i]
		q := v->byte + 1
		x = &v
	}
	
	print(x)
}

// Becomes:

proc some_proc() {
	x := & char{}
	arr := ['2', '4', '8', '16']
	while i := 0 ... i < arr.count() ... i += 1 {
		v := malloc(sizeof(typeof char)) as unsafe &char // `v` is a reference now. pointer + size of data is marked with the references for each byte
		v <- arr[i] // Underlying value of `v` gets assigned to
		q := (*v)->byte + 1 // All operations on v in the original code are actually implicitly dereferenced now
		x = &(*v)
	}
	
	print(x)
}

/*
`v` underlying value:

	+---------+
	|   '2'   |<-- v
	+---------+  
	             
	
	
	
*/

/*
`v` underlying value:

	+---------+
	|   '2'   |<-+-- v
	+---------+  |
	             +-- x
	
	
	
*/

/*
`v` underlying value:

	+---------+             +---------+
	|   '2'   |<-+   v -->  |   '4'   |
	+---------+  |          +---------+
	             +-- x
	
	
	
*/

/*
`v` underlying value:

	+---------+               +---------+
	|   '2'   |      v --+->  |   '4'   |
	+---------+          |    +---------+
	                 x --+
	
	
	
*/

/*
`v` underlying value (Original value gets deleted once there are no references to it):

	+---------+               +---------+
	| deleted |      v --+->  |   '4'   |
	+---------+          |    +---------+
	                 x --+
	
	
	
*/

struct reference_record_hash_map {
	table ptr[0x100]
}

struct reference_record {
	to_ptr_suffix  uint
	from_ptr_list  ptr
	object_type_id uint
}
